---

- name: gather Nextcloud instance facts
  include: nextcloud/gather-facts.yml
  tags:
    - role:nextcloud:install
    - role:nextcloud:upgrade
    - role:nextcloud:maintenance-page
    - role:nextcloud:database
    - role:nextcloud:backup
    - role:nextcloud:apps

- name: copy over Nextcloud maintenance page
  include: nextcloud/maintenance-page.yml
  tags:
    - role:nextcloud:install
    - role:nextcloud:upgrade
    - role:nextcloud:maintenance-page

- name: download new Nextcloud version if required
  include: nextcloud/download.yml
  when: nextcloud_reg_do_install or nextcloud_reg_do_upgrade
  tags:
    - role:nextcloud:install
    - role:nextcloud:upgrade

- name: setup Nextcloud MySQL database
  include: nextcloud/mysql.yml
  tags:
    - role:nextcloud:install
    - role:nextcloud:upgrade
    - role:nextcloud:database

- name: configure Nextcloud
  include: nextcloud/configure.yml
  when: nextcloud_reg_do_install and not nextcloud_reg_config.stat.exists
  tags:
    - role:nextcloud:install

- name: backup Nextcloud
  include: nextcloud/backup.yml
  when: nextcloud_backup and nextcloud_reg_do_upgrade
  tags:
    - role:nextcloud:upgrade
    - role:nextcloud:backup

- name: upgrade Nextcloud
  include: nextcloud/upgrade.yml
  when: nextcloud_reg_do_upgrade
  tags:
    - role:nextcloud:upgrade

- name: harden Nextcloud installation
  include: nextcloud/harden.yml
  when: nextcloud_reg_do_install or nextcloud_reg_do_upgrade
  tags:
    - role:nextcloud:install
    - role:nextcloud:upgrade

- name: finalize Nextcloud instance
  include: nextcloud/finalize.yml
  when: nextcloud_reg_do_install or nextcloud_reg_do_upgrade
  tags:
    - role:nextcloud:install
    - role:nextcloud:upgrade

- block:
  - name: register available Nextcloud apps
    become: true
    become_user: "{{ nextcloud_http_user }}"
    command: php occ app:list --output=json_pretty --no-warnings
    args:
      chdir: "{{ nextcloud_instance }}"
    changed_when: false
    check_mode: no
    register: nextcloud_reg_app_list

  - name: convert Nextcloud app list to yaml
    set_fact:
      nextcloud_reg_apps_installed: "{{ nextcloud_reg_app_list.stdout | from_json }}"

  - name: Remove old Nextcloud app version
    include: nextcloud/app-remove.yml
    when:
      - nextcloud_item.value.version|d()
      - nextcloud_reg_apps_installed['enabled'][nextcloud_item.key]|d()
      - nextcloud_item.value.version | version_compare( nextcloud_reg_apps_installed['enabled'][nextcloud_item.key] , '!=' )
    loop_control:
      loop_var: nextcloud_item
    with_dict: "{{ nextcloud_apps }}"
    tags:
      - role:nextcloud:apps

  # * Install all apps from 'nextcloud_apps' that have an install path set
  #   and are not enabled yet
  # * Enable all remaining apps from 'nextcloud_apps' that are disabled but
  #   available locally
  - name: install/enable Nextcloud apps
    include: nextcloud/apps.yml
    when:
      - nextcloud_item.key not in nextcloud_reg_apps_installed.enabled
      - nextcloud_item.value.source|d() != "" or
          nextcloud_item.key in nextcloud_reg_apps_installed.disabled
    loop_control:
      loop_var: nextcloud_item
    with_dict: "{{ nextcloud_apps }}"
  when: nextcloud_apps|d() is mapping
  tags:
    - role:nextcloud:install
    - role:nextcloud:upgrade
    - role:nextcloud:apps

- name: disable Nextcloud apps
  become: true
  become_user: "{{ nextcloud_http_user }}"
  command: php occ app:disable "{{ nextcloud_item }}"
  args:
    chdir: "{{ nextcloud_instance }}"
  loop_control:
    loop_var: nextcloud_item
  with_items: "{{ nextcloud_apps_disabled }}"
  when:
    - nextcloud_apps_disabled|d()
    - nextcloud_item not in nextcloud_reg_apps_installed.disabled
  tags:
    - role:nextcloud:install
    - role:nextcloud:upgrade
    - role:nextcloud:apps

- name: create Nextcloud cronjob
  cron:
    name: "Nextcloud cronjob"
    minute: "*/15"
    user: "{{ nextcloud_http_user }}"
    job: "php -f {{ nextcloud_instance }}/cron.php"
    cron_file: nextcloud
  when: nextcloud_reg_do_install or nextcloud_reg_do_upgrade
  tags:
    - role:nextcloud:install
    - role:nextcloud:upgrade

- name: create Nextcloud logrotate rule
  template:
    src: nextcloud/nextcloud.logrotate.j2
    dest: /etc/logrotate.d/nextcloud
  when: nextcloud_reg_do_install or nextcloud_reg_do_upgrade
  tags:
    - role:nextcloud:install
    - role:nextcloud:upgrade
